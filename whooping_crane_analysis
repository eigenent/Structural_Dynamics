% Dimitrios Nentidis 6821

% clear all
% close all
% clc

%% data
P = 3;             % aem 6821
L = 500 + 10*P;    % lamda specified in schematic
r = 5 + 0.1*P;     % radious of rods
E = 210000;        % Young's modulud (MPa)
zeta = 0.01*P;     % damping metro
rho = 7.85*10e-9;  % material density (ton/mm^3)
A_el = pi*r^2;     % cross section of rod



%% geometry

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% nodes

     % FIRST FLOOR
N = [2*L 0 0;       3*L 0 0;     3*L L 0;     2*L L 0;
     
     % SECOND FLOOR
     2*L 0 L;       3*L 0 L;     3*L L L;     2*L L L;     (2*L+L/2) L/2 L;
     
     % THIRD FLOOR
     2*L 0 2*L;     3*L 0 2*L;   3*L L 2*L;   2*L L 2*L;   (2*L+L/2) L/2 2*L;
     
     % FOURTH FLOOR
     2*L 0 3*L;     3*L 0 3*L;   3*L L 3*L;   2*L L 3*L;   (2+0.5)*L L/2 3*L;
     
     % FIFTH FLOOR 
     2*L 0 (3+1/2)*L;  
     3*L 0 (3+1/2)*L;  3*L L/2 (3+1/2)*L;  3*L L (3+1/2)*L; 
     2*L L (3+1/2)*L;  2*L L/2 (3+1/2)*L;  (2*L+L/2) L/2 (3+1/2)*L;
      
	 % ROOF
     (2+0.5)*L 0 (4+0.5)*L;  (2+0.5)*L L/2 (4+0.5)*L;  (2+0.5)*L L (4+0.5)*L;
    
     % TOWARDS ORIGIN
     % 1ST CONE 
     0 0 3*L;  L 0 3*L;  L L 3*L;  0 L 3*L;  L/2 L/2 (3+0.5)*L;
     
	 % 2ND CONE
	 (1+0.5)*L L/2 (3+0.5)*L;
     
     % TOWARDS LOADING
	 % 3RD CONE
	 4*L 0 3*L;  4*L L 3*L;  (3+0.5)*L L/2 (3+0.5)*L;
	 
     % 4TH CONE
     5*L 0 3*L;  5*L L 3*L;  (4+0.5)*L L/2 (3+0.5)*L;
     
     % 5TH CONE
     6*L 0 3*L;  6*L L 3*L;  (5+0.5)*L L/2 (3+0.5)*L;
     
     % 6TH CONE
     7*L 0 3*L;  7*L L 3*L;  (6+0.5)*L L/2 (3+0.5)*L];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                % first block
Connectivity = [1 2; 2 3; 3 4; 4 1; % base
                5 6; 6 7; 7 8; 8 5; 5 9; 6 9; 7 9; 8 9; % 1st
                1 5; 2 6; 3 7; 4 8; 1 6; 6 3; 3 8; 8 1; % base-1st
                
                % 2nd block
                10 11; 11 12; 12 13; 13 10; 10 14; 11 14; 12 14; 13 14; % 2nd
                5 10; 6 11; 7 12; 8 13; 9 14; 6 12; 12 8; 8 10; 10 6; % 1st-2nd

                % 3rd block
                15 16; 16 17; 17 18; 18 15; 15 19; 16 19; 17 19; 18 19; % 3rd
                10 15; 11 16; 12 17; 13 18; 14 19; 10 16; 16 12; 12 18; 18 10; % 2nd-3rd

                % 4th block
                20 21; 21 22; 22 23; 23 24; 24 25; 25 20; % 4th rectangle
                20 26; 21 26; 22 26; 23 26; 24 26; 25 26; % 4th cross and L/2
                15 20; 16 21; 17 23; 18 24; 19 26; 16 23; 23 18; 18 20; 20 16; % 3rd-4th

                % Roof
                20 27; 21 27; 22 28; 23 29; 24 29; 25 28; 26 28; 27 28; 28 29; % ROOF %9 

                % TOWARDS ORIGIN
                30 31; 31 32; 32 33; 33 30; 30 32; 30 34; 31 34; 32 34; 33 34; % FIRST CONE %9
                31 15; 18 32; 15 32; 31 35; 15 35; 18 35; 32 35; % SECOND CONE %7
                34 35; 35 25; 34 28; % CONNECTION WITH CENTRAL TOWER %3 

                % TOWARDS LOADING
                16 36; 36 37; 37 17; 17 36; 16 38; 36 38; 37 38; 17 38; % 3RD CONE 
                36 39; 39 40; 40 37; 36 40; 36 41; 39 41; 40 41; 37 41; % FOURTH CONE
                39 42; 42 43; 43 40; 40 42; 39 44; 42 44; 43 44; 40 44; % FIFTH CONE
                42 45; 45 46; 46 43; 42 46; 42 47; 45 47; 46 47; 43 47; % SIXTH CONE
                22 38; 38 41; 41 44; 44 47; 28 47]; % CONNECTION WITH THE MAIN TOWER

%% pre processor

%%%%%%%%%%%%%%%%%%%%%%%%%%%% K_stiff and Mtotal %%%%%%%%%%%%%%%%%%%%%%%%%%%

L_el=0;            % initializing element Length
GDof=3*47;        %global degrees of freedom
elementDof=3*47;
K_stiff=zeros(3*47, 3*47);
M_total=zeros(3*47, 3*47);


for i = 1:size(Connectivity,1)       
    % Element length
    indice = Connectivity(i,:);
    elementDof = [3*indice(1)-2 3*indice(1)-1 3*indice(1)...
                  3*indice(2)-2 3*indice(2)-1 3*indice(2)];   %element degree of freedom
    x1=N(indice(1),1);
    y1=N(indice(1),2);
    z1=N(indice(1),3);
    x2=N(indice(2),1);
    y2=N(indice(2),2);
    z2=N(indice(2),3);
    L_el = sqrt((x2-x1)^2 + (y2-y1)^2 +(z2-z1)^2);
      
    % Local stiffness matrix
    % Cosines 
    nx = ( x2 - x1 )/L_el;
    ny = ( y2 - y1 )/L_el;
    nz = ( z2 - z1 )/L_el;

   K_global=E*A_el/L_el.*[nx^2 nx*ny nx*nz -nx^2 -nx*ny -nx*nz; 
                          nx*ny ny^2 ny*nz -nx*ny -ny^2 -ny*nz; 
                          nx*nz ny*nz nz^2 -nx*nz -ny*nz -nz^2; 
                          -nx^2 -nx*ny -nx*nz nx^2 nx*ny nx*nz; 
                          -nx*ny -ny^2 -ny*nz nx*ny ny^2 ny*nz; 
                          -nx*nz -ny*nz -nz^2 nx*nz ny*nz nz^2];

   M = (1/6)*rho*A_el*L_el*[2 0 0 1 0 0
                            0 2 0 0 1 0
                            0 0 2 0 0 1
                            1 0 0 2 0 0
                            0 1 0 0 2 0
                            0 0 1 0 0 2];

 

    % generally speaking, the dofs per node are 3, -2 is x, -1 is y and -0 is z
    K_stiff(elementDof,elementDof) = K_stiff(elementDof,elementDof) + K_global;
    M_total(elementDof,elementDof) = M_total(elementDof,elementDof) + M;
end

kappa = K_stiff';
if kappa == K_stiff
    disp("K = K' ");
else
    disp("K is not equal to K'");
end

mhi = M_total';
if mhi == M_total
    disp("M = M' ");
else
    disp("M is not equal to M'");
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% solving %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 1st question, eigenproblem 5 first vec, val

% boundary conditions
bouCond=(1:12);

% active dof
activeDoF=setdiff([1:GDof]',[bouCond]);

[vec,val] = eig(K_stiff(activeDoF, activeDoF), M_total(activeDoF, activeDoF));
eigenvalues = sqrt(diag(val));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 2nd question, static loading

% the forces are at nodes 45 -> F2, 47 =>F1
Fstatic = zeros(size(N,1)*3,1);            % initializing Fstatic
Fstatic(47*3-2,1) =  15000 + 10*P;         % F1x (N)
Fstatic(47*3-1,1) =  -2000 + 10*P;         % F1y (N)
Fstatic(47*3-0,1) =  -5000 + 10*P;         % F1z (N)
Fstatic(45*3-2,1) =  30000 + 20*P;         % F2x (N)
Fstatic(45*3-1,1) =  -2000 + 10*P;         % F2y (N)
Fstatic(45*3-0,1) = -10000 + 10*P;         % F2z (N)

% static solving
U=pinv(K_stiff(activeDoF,activeDoF))*Fstatic(activeDoF);

% displacements
Displacements_static = zeros(GDof,1);
Displacements_static(activeDoF,1) = U;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 3rd question, transient response analysis

% damping
Z = 2*zeta*val;
C = M_total(activeDoF, activeDoF)*vec*Z*vec'*M_total(activeDoF,activeDoF);

% aposymplegmeno provlhma
Phi = vec;                                         % φ is eigenvectors 

% % I*τ(t) + Ζ*τ(t) + Λ*τ(t) = p(t)
I = Phi'*M_total(activeDoF,activeDoF)*Phi;
Zhta = Phi'*C*Phi;
Lamda = Phi'*K_stiff(activeDoF,activeDoF)*Phi;

% solve the odes for every time step
IC = [0;0];                                        % Initial conditions

% asking user for time input
answer1 = inputdlg({"for how long?", "time step"},...
    'TIME', [1 51],{'10', '1'}); 

total_time = str2double(answer1{1});
time_step  = str2double(answer1{2});  
time=0:time_step:total_time;                                     

tau = zeros(size(time,2), 2, size(activeDoF,1));   % initializing tau
 
% the forces are at nodes 45 -> F2, 47 =>F1
Fdynamic = zeros(size(N,1)*3,size(time,2));        % initializing Fdynamic
Fdynamic(47*3-0,:) = -500*P*cos((5+0.1*P)*time);   % F1z (N)
Fdynamic(45*3-0,:) = +300*P*sin((10+0.1*P)*time);  % F1z (N)

% Pforce = Phi'*Fdynamic(activeDoF,1);
Pforce = zeros(size(N,1)*3,size(time,2));

for j=1:size(time,2)
    Pforce(activeDoF,j) = Phi'*Fdynamic(activeDoF,j);
end

for i=activeDoF(1,1):activeDoF(129,1)
    % I need to actually solve for τ 

    % state space matrices
    A = [0 1; -Lamda(i-12,i-12) -Zhta(i-12,i-12)]; % this is a correction since we do not have lamda and zhta for the first 12 dofs
    B = [0; 1];

    % loading
    p = Pforce(i,:);

    [time1, T] = ode45(@(t, T) dynamics(t, T, p, time, A, B), time, IC);
    
    tau(:,:,i) = T;

    i 
end

disp('taus are calculated');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% we need to go back to x

% first repackage the info properly

% only care about discpacements
taf = tau(:,1,:);

% Squeeze the matrix to remove singleton dimensions
squeezedMatrix = squeeze(taf);

% Permute the dimensions to rearrange the order
permutedMatrix = permute(squeezedMatrix, [2, 1]);

% Reshape the matrix to size 129x11
taph = reshape(permutedMatrix, [], 11);

Xi = zeros(GDof, size(time,2));
xi = zeros(size(activeDoF,1), size(time,2));

for t=1:size(time,2)
    xi(:,t) = Phi*taph(:,t);
end

Xi(13:141, :) = xi;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%% post processing %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 1st erwthma

% asking user for the amount of eigenvalues displayed
answer2 = inputdlg({"How many eigenvalues and eigenvectors do you want displayed?"},...
    'Eigenproblem', [1 51],{'5'}); 

that_many = str2double(answer2{1});

% going from rad/s to Hz
eigenvalues_hz = eigenvalues./(2*pi);

% eigenvalues
disp(['here are the first ', num2str(that_many), ' eigenvalues [Hz]']);
disp(eigenvalues_hz(2:that_many+1)); % the 2:that_many+1 is because the first value is 0 and is that of rigid body movement

% eigenvectors 
disp('for the eigenvectors you can check the relevant matrix. The first 7 are the first 7 columns.')

Morph = zeros(141,that_many);
Morph_47x3 = zeros(47,3,that_many);
for iii=1:that_many
    Morph(13:141,iii) = vec(:,iii);
    % Reshape Morph to Morph more like the N matrix with 
    Morph_47x3(:,:,iii) = reshape(Morph(1:47*3,iii), 3, [])';  % Reshape first 47*3 elements of Morph to 47x3 matrix Morph_47x3
end

% here is the original shape
figure (1)
for i = 1:140
  x1 = N(Connectivity(i,1),1);
  y1 = N(Connectivity(i,1),2);
  z1 = N(Connectivity(i,1),3);
  x2 = N(Connectivity(i,2),1);
  y2 = N(Connectivity(i,2),2);
  z2 = N(Connectivity(i,2),3);
  plot3([x1,x2],[y1,y2],[z1,z2],'-o', 'Color', 'red')
  hold on
end
axis equal
legend('original shape');



% here is the eigenmorphs so to speak
for iii=1:that_many
    figure (iii+1)
for i = 1:140
  x1 = N(Connectivity(i,1),1) - 100*Morph_47x3(Connectivity(i,1),1, iii);
  y1 = N(Connectivity(i,1),2) - 100*Morph_47x3(Connectivity(i,1),2, iii);
  z1 = N(Connectivity(i,1),3) - 100*Morph_47x3(Connectivity(i,1),3, iii);
  x2 = N(Connectivity(i,2),1) - 100*Morph_47x3(Connectivity(i,2),1, iii);
  y2 = N(Connectivity(i,2),2) - 100*Morph_47x3(Connectivity(i,2),2, iii);
  z2 = N(Connectivity(i,2),3) - 100*Morph_47x3(Connectivity(i,2),3, iii);
  plot3([x1,x2],[y1,y2],[z1,z2],'-o', 'Color','blue')
  hold on
end
axis equal
legend(['This happens at ', num2str(eigenvalues_hz(iii+1)), 'Hz']);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 2nd erwthma

disp('the displacement of node 45 was')

% blah blah blah

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 3rd erwthma

% the exercise asks for the response of node 45.
x_45 = Xi(44*3+1,:);
y_45 = Xi(44*3+2,:);
z_45 = Xi(44*3+3,:);

% Create a new figure
figure;

% Plot the first subplot
subplot(3, 1, 1);
plot(time, x_45)
title('X response');

% Plot the second subplot
subplot(3, 1, 2);
plot(time, y_45)
title('Y response');

% Plot the third subplot
subplot(3, 1, 3);
plot(time, z_45)
title('Z response');

%%%% the end %%%%
